[{"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\index.tsx":"1","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\App.js":"2","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\Reducers\\index.tsx":"3","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Register.js":"4","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Home.js":"5","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Forgot.js":"6","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Login.js":"7","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ShowingCsv.js":"8","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\PublicUser.js":"9","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\SingleUser.js":"10","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\RegisterMain.js":"11","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ActivateAccount.js":"12","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\editor\\Editor.tsx":"13","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Navbar.js":"14","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Settings.js":"15","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ListUsers.js":"16","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\TableColumn.js":"17","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Summary.js":"18","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ManualCutout.js":"19","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\configurations\\urls.js":"20","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\Actions\\types.tsx":"21","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\editor\\types.ts":"22","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\sample.js":"23","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\TableComp.js":"24","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\redux\\actions\\actionTypes.js":"25","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\Actions\\index.tsx":"26","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\CheckMail.js":"27","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\redux\\reducers\\index.js":"28","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\PrivateRoute.js":"29","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\utils\\setAuthToken.js":"30","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\redux\\actions\\index.js":"31","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ResetPassword.js":"32","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ClientTableColumn.js":"33"},{"size":450,"mtime":1611779482368,"results":"34","hashOfConfig":"35"},{"size":3953,"mtime":1611869142140,"results":"36","hashOfConfig":"35"},{"size":972,"mtime":1611761416901,"results":"37","hashOfConfig":"35"},{"size":6433,"mtime":1611831461667,"results":"38","hashOfConfig":"35"},{"size":5419,"mtime":1611861876683,"results":"39","hashOfConfig":"35"},{"size":2308,"mtime":1611838283163,"results":"40","hashOfConfig":"35"},{"size":4483,"mtime":1611860597070,"results":"41","hashOfConfig":"35"},{"size":625,"mtime":1610998684000,"results":"42","hashOfConfig":"35"},{"size":4413,"mtime":1611861730301,"results":"43","hashOfConfig":"35"},{"size":3629,"mtime":1611865657434,"results":"44","hashOfConfig":"35"},{"size":7613,"mtime":1611840797563,"results":"45","hashOfConfig":"35"},{"size":1290,"mtime":1611587370000,"results":"46","hashOfConfig":"35"},{"size":60718,"mtime":1611783800580,"results":"47","hashOfConfig":"35"},{"size":1380,"mtime":1611003488000,"results":"48","hashOfConfig":"35"},{"size":10070,"mtime":1611869604274,"results":"49","hashOfConfig":"35"},{"size":1336,"mtime":1611862314722,"results":"50","hashOfConfig":"35"},{"size":7736,"mtime":1611869111442,"results":"51","hashOfConfig":"35"},{"size":874,"mtime":1611859066248,"results":"52","hashOfConfig":"35"},{"size":1918,"mtime":1611081756000,"results":"53","hashOfConfig":"35"},{"size":843,"mtime":1611869218915,"results":"54","hashOfConfig":"35"},{"size":290,"mtime":1611761025826,"results":"55","hashOfConfig":"35"},{"size":444,"mtime":1610648788000,"results":"56","hashOfConfig":"35"},{"size":3965,"mtime":1610648374000,"results":"57","hashOfConfig":"35"},{"size":278,"mtime":1611857836463,"results":"58","hashOfConfig":"35"},{"size":162,"mtime":1611852351633,"results":"59","hashOfConfig":"35"},{"size":227,"mtime":1611761033923,"results":"60","hashOfConfig":"35"},{"size":1418,"mtime":1611779689113,"results":"61","hashOfConfig":"35"},{"size":660,"mtime":1611853429379,"results":"62","hashOfConfig":"35"},{"size":2443,"mtime":1611861044922,"results":"63","hashOfConfig":"35"},{"size":320,"mtime":1611773521717,"results":"64","hashOfConfig":"35"},{"size":582,"mtime":1611852341153,"results":"65","hashOfConfig":"35"},{"size":4432,"mtime":1611840807702,"results":"66","hashOfConfig":"35"},{"size":5779,"mtime":1611869096972,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1cncs79",{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\index.tsx",[],["145","146"],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\App.js",["147","148"],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\Reducers\\index.tsx",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Register.js",["149","150","151","152","153"],"import React, { useState } from 'react'\r\nimport { Form, Input, InputNumber, Button, Upload, message } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport Navbar from './Navbar';\r\nimport axios from 'axios'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { userPreferences } from '../configurations/urls';\r\nimport { getUserData } from './../configurations/urls';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentUser } from '../redux/actions';\r\nconst validateMessages = {\r\n    required: '${label} is required!',\r\n    types: {\r\n        email: '${label} is not a valid email!',\r\n        number: '${label} is not a valid number!',\r\n    },\r\n    number: {\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\nconst Register = (props) => {\r\n    const [newfile, setNewfile] = useState('')\r\n    const [oldfile, setOldFile] = useState('')\r\n    const [success, setSuccess] = useState(null)\r\n    const dispatch = useDispatch()\r\n    const onFinish = (values) => {\r\n        console.log(values.user);\r\n        const formData = new FormData()\r\n        for (var key in values.user) {\r\n            var value = values.user[key];\r\n            formData.append(key, value)\r\n        }\r\n        /* formData.append('hello','hy') */\r\n        formData.append('new_background_image', newfile)\r\n        formData.append('used_background_image', oldfile)\r\n        formData.append('new_enhance_all', true)\r\n        formData.append('used_enhance_all', true)\r\n        console.log(formData)\r\n        axios.post(userPreferences, formData)\r\n            .then(res => {\r\n                setSuccess(true)\r\n                axios.get(getUserData)\r\n                    .then(res=>{\r\n                        dispatch(setCurrentUser(res.data))\r\n                        localStorage.setItem('type', 'public')\r\n                        props.history.push('/')\r\n                    }).catch(err=>{\r\n                        console.log(err)\r\n                    })\r\n               \r\n            })\r\n            .catch(err => console.log(err))\r\n    };\r\n    const customRequestFun = (options) => {\r\n        const { onSuccess, file } = options;\r\n        setNewfile(file)\r\n        onSuccess(file)\r\n    };\r\n    const customRequestFun1 = (options) => {\r\n        const { onSuccess, file } = options;\r\n        setOldFile(file)\r\n        onSuccess(file)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <div className=\"container py-2\">\r\n                <div className=\"row py-5 justify-content-center\">\r\n                    <div className=\"col-md-8\">\r\n                        <div className=\"box\">\r\n                            <Form name=\"nest-messages\" layout=\"horizontal\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                                <h5 className=\"mt-4\">Exterior Background</h5>\r\n                                <h6>New Vehicles</h6>\r\n                                <Form.Item name={['user', 'new_num_images']} label=\"Num images to enchance per vehicle\">\r\n                                    <Input />\r\n                                </Form.Item>\r\n                                <Form.Item name={['user', 'new_only_enhance_min_num']} label=\"Only enhance if vehicle has a minimun of\" >\r\n                                    <InputNumber />\r\n                                </Form.Item>\r\n                                <Form.Item name={['user', 'new_enhance_all']} label=\"Enhance all existing inventory\">\r\n                                    <Input type=\"checkbox\" />\r\n                                </Form.Item>\r\n                                <Form.Item name={['user', 'new_enhance_after']} label=\"Enhance inventory only after\">\r\n                                    <Input type=\"date\" format={'YYYY-MM-DD'}  />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"Upload background image\">\r\n                                    <Upload customRequest={customRequestFun}>\r\n                                        <Button icon={<UploadOutlined />}>Click to Upload</Button>\r\n                                    </Upload>\r\n                                </Form.Item>\r\n                                <h6 className=\"pt-4\">Used Vehicles</h6>\r\n                                <Form.Item name={['user', 'used_num_images']} label=\"Num images to enchance per vehicle\">\r\n                                    <Input />\r\n                                </Form.Item>\r\n                                <Form.Item name={['user', 'used_only_enhance_min_num']} label=\"Only enhance if vehicle has a minimun of\" >\r\n                                    <InputNumber />\r\n                                </Form.Item>\r\n                                <Form.Item name={['user', 'used_enhance_all']} label=\"Enhance all existing inventory\">\r\n                                    <Input type=\"checkbox\" />\r\n                                </Form.Item>\r\n                                <Form.Item name={['user', 'used_enhance_after']} label=\"Enhance inventory only after\">\r\n                                    <Input type=\"date\" format={'YYYY-MM-DD'} />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"Upload background image\">\r\n                                    <Upload customRequest={customRequestFun1}>\r\n                                        <Button icon={<UploadOutlined />}>Click to Upload</Button>\r\n                                    </Upload>\r\n                                </Form.Item>\r\n                                <h6 className=\"pt-4\">Notes/Comments:</h6>\r\n                                <Form.Item name={['user', 'notes']} >\r\n                                    <Input.TextArea />\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    <Button type=\"primary\" htmlType=\"submit\">\r\n                                        Save Info\r\n                                </Button>\r\n                                </Form.Item>\r\n                                {success && <p className=\"text-success\">\r\n                                    Information Successfully Submitted\r\n                                    </p>}\r\n                            </Form>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(Register)\r\n",["154","155"],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Home.js",["156","157","158","159","160"],"import React, { useState, useEffect } from 'react';\r\nimport { Layout, Menu, Tabs, message } from 'antd';\r\nimport { useLocation, withRouter } from 'react-router-dom';\r\nimport {\r\n    MenuUnfoldOutlined,\r\n    MenuFoldOutlined,\r\n    TeamOutlined,\r\n    UnorderedListOutlined,\r\n    FundViewOutlined,\r\n    UploadOutlined,\r\n    TabletOutlined,\r\n    SettingOutlined,\r\n    ScissorOutlined\r\n} from '@ant-design/icons';\r\nimport Settings from './Settings';\r\nimport ListUsers from './ListUsers';\r\nimport ShowingCsv from './ShowingCsv';\r\nimport Summary from './Summary';\r\nimport ManualCutout from './ManualCutout';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { logoutUser } from '../redux/actions';\r\n\r\nconst { Header, Sider, Content } = Layout;\r\nconst { TabPane } = Tabs;\r\nconst Home = (props) => {\r\n    const user = useSelector(state => state.user.user)\r\n    const dispatch = useDispatch()\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const [active, setActive] = useState(null);\r\n    const { pathname } = useLocation();\r\n    useEffect(() => {\r\n        if (pathname === '/clients') {\r\n            setActive('1')\r\n        } else if (pathname === '/inventory-list') {\r\n            setActive('2')\r\n        } else if (pathname === '/summary') {\r\n            setActive('3')\r\n        }\r\n        else if (pathname === '/cutout') {\r\n            setActive('4')\r\n        } else {\r\n            props.history.push('/clients')\r\n        }\r\n    }, [pathname])\r\n\r\n    useEffect(() => {\r\n        if(user.is_admin===false){\r\n            props.history.push('/public')\r\n        }\r\n    }, [])\r\n    const toggle = () => {\r\n        setCollapsed(!collapsed)\r\n    };\r\n    const changeLink = (e) => {\r\n        if (e.key === '1') {\r\n            props.history.push('/clients')\r\n        } else if (e.key === '2') {\r\n            props.history.push('/inventory-list')\r\n        } else if (e.key === '3') {\r\n            props.history.push('/summary')\r\n        } else if (e.key === '4') {\r\n            props.history.push('/cutout')\r\n        } else if (e.key === '5') {\r\n            dispatch(logoutUser())\r\n            window.location.replace('/login')\r\n        }\r\n    }\r\n    const showContent = () => {\r\n        if (active === '1') {\r\n\r\n            return <ListUsers user={user} />\r\n        } else if (active === '2') {\r\n\r\n            return <Tabs defaultActiveKey=\"1\">\r\n                <TabPane\r\n                    tab={\r\n                        <span>\r\n                            <TabletOutlined />\r\n              CSV Data\r\n            </span>\r\n                    }\r\n                    key=\"1\"\r\n                >\r\n                    <ShowingCsv />\r\n                </TabPane>\r\n                {/* <TabPane\r\n                    tab={\r\n                        <span>\r\n                            <SettingOutlined />\r\n              Settings\r\n            </span>\r\n                    }\r\n                    key=\"2\"\r\n                >\r\n                    <Settings />\r\n                </TabPane> */}\r\n            </Tabs>\r\n        } else if (active === '3') {\r\n            return <Summary />\r\n        }\r\n        else if (active === '4') {\r\n            return <ManualCutout />\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {active !== null ?\r\n                <Layout>\r\n                    <Sider trigger={null} collapsible collapsed={collapsed}>\r\n                        <div className=\"logo\">\r\n                            {!collapsed && <small className=\"text-white mb-0\">{user.email}</small>}\r\n                        </div>\r\n                        <Menu theme=\"dark\" mode=\"inline\" onClick={changeLink} defaultSelectedKeys={active}>\r\n                            <Menu.Item key=\"1\" icon={<TeamOutlined />}>\r\n                                Clients\r\n            </Menu.Item>\r\n                            <Menu.Item key=\"2\" icon={<UnorderedListOutlined />}>\r\n                                Inventory Lists\r\n            </Menu.Item>\r\n                            <Menu.Item key=\"3\" icon={<FundViewOutlined />}>\r\n                                View Summary\r\n            </Menu.Item>\r\n                            <Menu.Item key=\"4\" icon={<ScissorOutlined />}>\r\n                                Manual Cutout\r\n            </Menu.Item>\r\n                            <Menu.Item key=\"5\" icon={<UploadOutlined />}>\r\n                                Logout\r\n            </Menu.Item>\r\n                        </Menu>\r\n                    </Sider>\r\n                    <Layout className=\"site-layout\">\r\n                        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n                            {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n                                className: 'trigger',\r\n                                onClick: toggle,\r\n                            })}\r\n                        </Header>\r\n                        <Content\r\n                            className=\"site-layout-background\"\r\n                            style={{\r\n                                margin: '24px 16px',\r\n                                padding: 24,\r\n                                minHeight: '100vh',\r\n\r\n                            }}\r\n                        >\r\n                            {showContent()}\r\n\r\n\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout > : null }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(Home)\r\n","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Forgot.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Login.js",["161","162"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Input, Button } from 'antd';\r\nimport Navbar from './Navbar';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { allUsersData, LOG_IN_JWT } from '../configurations/urls';\r\nimport setAuthToken from './../utils/setAuthToken';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentUser } from '../redux/actions';\r\nimport { getUserData } from './../configurations/urls';\r\nimport { setAllUsers } from './../redux/actions/index';\r\n\r\nconst Login = ({ user, history }) => {\r\n    const [error, setError] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const userCreds = JSON.parse(localStorage.getItem('userCreds'))\r\n        if (userCreds && userCreds.access) {\r\n            history.push('/public')\r\n        }\r\n    })\r\n    const onFinish = (values) => {\r\n\r\n        const userCreds = {\r\n            email: values['email'],\r\n            password: values['password']\r\n        }\r\n\r\n       \r\n            axios.post(LOG_IN_JWT, userCreds)\r\n                .then(res => {\r\n                    localStorage.setItem('userCreds', JSON.stringify({\r\n                        refresh: res.data.refresh,\r\n                        access: res.data.access\r\n                    }))\r\n                    setAuthToken(res.data.access);\r\n                    axios.get(getUserData)\r\n                        .then(res => {\r\n                            dispatch(setCurrentUser(res.data))\r\n                            history.push('/public')\r\n                        }).catch(err => {\r\n                            console.log(err)\r\n                        })\r\n\r\n                })\r\n                .catch(err => setError(true))\r\n        \r\n\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n    return (\r\n        <>\r\n            <Navbar user={user} />\r\n            <div className=\"container text-center\">\r\n                {user === 'admin' ? <h3 className=\"mt-4\">Admin login</h3> : <h3 className=\"mt-4\">Public Login</h3>}\r\n                <div className=\"row pt-3 justify-content-center\">\r\n\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"box\">\r\n                            <Form\r\n                                name=\"basic\"\r\n                                layout=\"vertical\"\r\n                                onChange={() => setError(null)}\r\n                                onFinish={onFinish}\r\n                                onFinishFailed={onFinishFailed}\r\n                            >\r\n                                <Form.Item\r\n                                    label=\"Email\"\r\n                                    name=\"email\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please type your email!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input />\r\n                                </Form.Item>\r\n\r\n                                <Form.Item\r\n                                    label=\"Password\"\r\n                                    name=\"password\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please type your password!',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input.Password />\r\n                                </Form.Item>\r\n\r\n\r\n\r\n                                <Form.Item>\r\n                                    <Button type=\"primary\" htmlType=\"submit\">\r\n                                        Login\r\n                                    </Button>\r\n                                    <Link to=\"/forgot\" className=\"m-3\">Forgot password</Link>\r\n                                </Form.Item>\r\n                                {error && <span style={{ color: 'red' }}>Email or Password is invalid</span>}\r\n                            </Form>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(Login)\r\n","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ShowingCsv.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\PublicUser.js",["163","164"],"import React, { useState, useEffect } from 'react'\r\nimport { Layout, Menu } from 'antd';\r\nimport { withRouter } from 'react-router-dom'\r\nimport {\r\n    MenuUnfoldOutlined,\r\n    MenuFoldOutlined,\r\n    UserOutlined,\r\n    UploadOutlined,\r\n    FundViewOutlined,\r\n    SettingOutlined\r\n} from '@ant-design/icons'\r\nimport ListUsers from './ListUsers';\r\nimport Summary from './Summary';\r\nimport Settings from './Settings';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { logoutUser } from '../redux/actions';\r\nimport jwtDecode from 'jwt-decode';\r\nimport { refreshToken } from '../configurations/urls';\r\nimport axios from 'axios'\r\nimport setAuthToken from './../utils/setAuthToken';\r\n\r\nconst { Header, Sider, Content } = Layout;\r\nconst PublicUser = ({ history }) => {\r\n    const user = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const [active, setActive] = useState('1');\r\n    const [email, setEmail] = useState('');\r\n\r\n    useEffect(() => {\r\n        console.log('check token')\r\n        const { access, refresh } = JSON.parse(localStorage.getItem('userCreds'))\r\n        console.log('access', access)\r\n        const decoded = jwtDecode(access)\r\n        const currentTime = Date.now() / 1000;\r\n        if (decoded.exp < currentTime) {\r\n            axios.post(refreshToken, { refresh: refresh })\r\n                .then(res => {\r\n                    const userCreds = {\r\n                        access: res.data.access,\r\n                        refresh: refresh\r\n                    }\r\n                    localStorage.setItem('userCreds', JSON.stringify(userCreds))\r\n                    setAuthToken(res.data.access)\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                    dispatch(logoutUser())\r\n                    window.location.replace('/login')\r\n                })\r\n        }\r\n    }, [active])\r\n\r\n    useEffect(() => {\r\n        if(user.user.is_admin===true){\r\n            history.push('/')\r\n        }\r\n        setEmail(user.user.email)\r\n    }, [])\r\n    const toggle = () => {\r\n        setCollapsed(!collapsed)\r\n    };\r\n    const changeLink = (e) => {\r\n        setActive(e.key)\r\n    }\r\n    const showContent = () => {\r\n        if (active === '1') {\r\n            return <ListUsers id=\"8970\" user={user.user} />\r\n        } else if (active === '2') {\r\n            return <Summary />\r\n        }\r\n        else if (active === '3') {\r\n            return <Settings active={active} />\r\n        }\r\n        else if (active === '4') {\r\n            dispatch(logoutUser())\r\n            window.location.replace('/login')\r\n        }\r\n    }\r\n    return (\r\n        <Layout>\r\n            <Sider trigger={null} collapsible collapsed={collapsed}>\r\n                <div className=\"logo\">\r\n                    {!collapsed && <small className=\"text-white mb-0\">{email}</small>}\r\n                </div>\r\n                <Menu theme=\"dark\" mode=\"inline\" onClick={changeLink} defaultSelectedKeys={['1']}>\r\n                    <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n                        Inventory Lists\r\n            </Menu.Item>\r\n                    <Menu.Item key=\"2\" icon={<FundViewOutlined />}>\r\n                        View Summary\r\n            </Menu.Item>\r\n                    <Menu.Item key=\"3\" icon={<SettingOutlined />}>\r\n                        Settings\r\n            </Menu.Item>\r\n                    <Menu.Item key=\"4\" icon={<UploadOutlined />}>\r\n                        Logout\r\n            </Menu.Item>\r\n                </Menu>\r\n            </Sider>\r\n            <Layout className=\"site-layout\">\r\n                <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n                    {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n                        className: 'trigger',\r\n                        onClick: toggle,\r\n                    })}\r\n                </Header>\r\n                <Content\r\n                    className=\"site-layout-background\"\r\n                    style={{\r\n                        margin: '24px 16px',\r\n                        padding: 24,\r\n                        minHeight: '100vh',\r\n\r\n                    }}\r\n                >\r\n                    {showContent()}\r\n\r\n\r\n                </Content>\r\n            </Layout>\r\n        </Layout >\r\n    )\r\n}\r\n\r\nexport default withRouter(PublicUser)\r\n","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\SingleUser.js",["165"],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\RegisterMain.js",["166","167","168","169"],"import React, { useState } from 'react'\r\nimport { Form, Input, Button } from 'antd';\r\nimport Navbar from './Navbar';\r\nimport axios from 'axios'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { userCreateEndPoint, reSendEmailURL } from '../configurations/urls';\r\nimport CheckMail from './CheckMail';\r\nconst validateMessages = {\r\n    required: '${label} is required!',\r\n    types: {\r\n        email: '${label} is not a valid email!',\r\n        number: '${label} is not a valid number!',\r\n    },\r\n    number: {\r\n        range: '${label} must be between ${min} and ${max}',\r\n    },\r\n};\r\n\r\n\r\nfunction RegisterMain() {\r\n    const [message, setMessage] = useState(\"There is something wrong\")\r\n    const [showMessage, setshowMessage] = useState(false);\r\n    const [email, setEmail] = useState('')\r\n\r\n\r\n    const reSendEmail = () => {\r\n        if (email) {\r\n            console.log(\"Resending Email\");\r\n            axios.post(reSendEmailURL, { email })\r\n                .then(res => {\r\n                    setMessage(\"Email Sent\")\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                })\r\n        }\r\n    };\r\n   \r\n    const onFinish = (values) => {\r\n        console.log(values.user);\r\n        const userData = {\r\n            email: values.user[\"email\"],\r\n            dealer_name: values.user[\"dealerName\"],\r\n            address: values.user[\"address\"],\r\n            phone: values.user[\"phone\"],\r\n            state: values.user[\"state\"],\r\n            city: values.user[\"city\"],\r\n            zip_code: values.user[\"zipcode\"],\r\n            website: values.user[\"website\"],\r\n            password: values.user[\"password\"],\r\n            re_password: values.user[\"password\"]\r\n        };\r\n        console.log(userData)\r\n        if (userData.email && userData.password) {\r\n            axios.post(userCreateEndPoint, userData)\r\n                .then(res => {\r\n                    setEmail(userData['email'])\r\n                })\r\n                .catch(err => {\r\n                    console.log(err)\r\n                    setshowMessage(true);\r\n                    \r\n                })\r\n        }\r\n    };\r\n \r\n      const inputConfig = {\r\n        rules: [\r\n          {\r\n            required: true,\r\n            message: 'Please input this field!',\r\n          },\r\n        ],\r\n      };\r\n      const passwordConfig={\r\n          rules:[\r\n              {required:true,message:'Please input this field'},\r\n              { min: 8, message: 'Password must be minimum 8 characters.' }\r\n          ]\r\n      }\r\n      const emailConfig={\r\n        rules: [\r\n            {\r\n                type: 'email',\r\n                message: 'The input is not valid E-mail!',\r\n              },\r\n            {\r\n              required: true,\r\n              message: 'Please input your E-mail!',\r\n            },\r\n          ],\r\n      }\r\n\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            \r\n            <div className=\"container py-2\">\r\n            {email?<CheckMail reSendEmail={reSendEmail} />:\r\n                <div className=\"row py-5 justify-content-center\">\r\n                    <div className=\"col-md-8\">\r\n                        <div className=\"box\">\r\n                            <Form name=\"nest-messages\" layout=\"horizontal\" onFinish={onFinish} validateMessages={validateMessages}>\r\n                                <h5>Dealer Personal Information</h5>\r\n                                \r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <Form.Item name={['user', 'dealerName']} label=\"Dealer Name\" {...inputConfig}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <Form.Item name={['user', 'address']} label=\"Address\" {...inputConfig}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </div>\r\n\r\n\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <Form.Item name={['user', 'email']} label=\"Email\" {...emailConfig}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <Form.Item name={['user', 'password']} label=\"Password\" {...passwordConfig}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <Form.Item name={['user', 'phone']} label=\"Phone\" {...inputConfig}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <Form.Item name={['user', 'state']} label=\"State\" {...inputConfig}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </div>\r\n\r\n\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <Form.Item name={['user', 'city']} label=\"City\" {...inputConfig}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <Form.Item name={['user', 'zipcode']} label=\"Zip\" {...inputConfig}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </div>\r\n\r\n\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <Form.Item name={['user', 'website']} label=\"Website\" {...inputConfig}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                </div>\r\n                                <Form.Item>\r\n                                    <Button type=\"primary\" htmlType=\"submit\">\r\n                                        Create Account\r\n                                    </Button>\r\n                                    {showMessage &&\r\n                                    <span className=\"ml-3\" style={{ color: 'red' }}>{message}</span>\r\n                                }\r\n                                </Form.Item>\r\n                            </Form>\r\n                            \r\n                           \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(RegisterMain);\r\n","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ActivateAccount.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\editor\\Editor.tsx",["170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"import classnames from 'classnames'\nimport React, { ReactElement, useCallback, useEffect, useMemo, useState } from 'react';\n// @ts-ignore\nimport { triggerBase64Download } from 'react-base64-downloader';\n\nimport transparent from '../../transparent.png';\nimport colors from '../../colors.png'\nimport { DrawPos, Orientation, ToolMode } from './types';\nimport { useSelector } from 'react-redux'\nimport { editorState } from './../../Reducers/index';\n\n\ninterface Props {\n    original: string,\n    removed: string,\n    idx: number,\n    saveFun: (removed: string, idx: number, obj: object) => (void),\n    closeFun: () => (void),\n    push(url: string): void\n}\n\nlet waitingOnDownload = 0, waitingOnSave = 0;\n\nexport default function Editor(\n  \n): ReactElement {\n    // Initialise refs to DOM elements\n    const colorRef = React.useRef<HTMLInputElement>(null)\n    const photoRef = React.useRef<HTMLInputElement>(null)\n    const launchModal = React.useRef<HTMLButtonElement>(null)\n    const closeModal = React.useRef<HTMLButtonElement>(null)\n    const canvasRef = React.useRef<HTMLCanvasElement>(null);\n    const canvasContainer = React.useRef<HTMLDivElement>(null);\n    const [context, setContext] = React.useState<CanvasRenderingContext2D | null>(null);\n\n    const originalImageCanvasRef = React.useRef<HTMLCanvasElement>(null);\n    const [originalImageContext, setOriginalImageContext] = React.useState<CanvasRenderingContext2D | null>(null);\n\n    const newImageCanvasRef = React.useRef<HTMLCanvasElement>(null);\n    const zoomedNewImageCanvasRef = React.useRef<HTMLCanvasElement>(null);\n\n    const [drawnPos, setDrawnPos] = useState<DrawPos[]>([]);\n\n    const originalImage = React.useRef<HTMLImageElement>(null);\n    const removedImage = React.useRef<HTMLImageElement>(null);\n    const transparentImage = React.useRef<HTMLImageElement>(null);\n    const blurRef = React.useRef<HTMLButtonElement>(null)\n    const cursorRef = React.useRef<HTMLDivElement>(null);\n\n    // Initialise tool states\n    const [mode, setMode] = useState<ToolMode>(0);\n\n    // Init brush size and zoom (tracked separately)\n    const [brushSize, setBrushSize] = useState(9);\n    const [zoom, setZoom] = useState(1);\n    const [color, setColor] = useState('')\n    const [readSaveImage, setReadSaveImage] = useState<any | null>(null)\n    // Store whether the background is transparent - we'll need to remove the grid before downloading\n    const [backgroundIsTransparent, setBackgroundIsTransparent] = useState(true);\n\n    // Store whether the input image is horizontal or vertical to configure layout as such.\n    const [orientation, setOrientation] = useState(Orientation.Vertical);\n    const [photo, setPhoto] = useState(true)\n    const [erase, setErase] = useState(false)\n    const [orgImage,setOrgImage]=useState('')\n    const [remImage,setRemImage]=useState('')\n    const editor = useSelector<editorState, editorState['editor']>(state => state.editor)\n    const imageToBase64 = (URL,typeSet) => {\n        let image;\n        image = new Image();\n        image.crossOrigin = 'Anonymous';\n        image.setAttribute('crossorigin', 'anonymous');\n        image.addEventListener('load', function() {\n            let canvas = document.createElement('canvas');\n            let context = canvas.getContext('2d');\n            canvas.width = image.width;\n            canvas.height = image.height;\n            if(context){\n                context.drawImage(image, 0, 0);\n                try {\n                    \n                    if(typeSet==='orignal'){\n                        setOrgImage(canvas.toDataURL('image/png'))\n                    }\n                    else\n                    setRemImage( canvas.toDataURL('image/png'))\n                } catch (err) {\n                    console.error(err)\n                }\n            }\n           \n        });\n        image.src = URL;\n    };\n    // Show warning if user tries to leave page\n    useEffect(() => {\n\n        if (editor.editor.orignalImage !== '' && editor.editor.orignalImage !== null){\n            \n            imageToBase64(editor.editor.orignalImage,'orignal')\n            imageToBase64(editor.editor.removedImage,'removed')\n            }\n           \n        else\n            window.location.replace('/')\n\n        if (launchModal.current)\n            launchModal.current.click()\n        window.onbeforeunload = function () {\n            return true;\n        };\n        const closeButton = closeModal.current\n        return (() => {\n            if (closeButton)\n                closeButton.click()\n        })\n    }, []);\n    // Create the cursor (an SVG)\n    const cursor = useMemo(() => {\n         /* return `<svg xmlns='http://www.w3.org/2000/svg' height='${brushSize * zoom}' width='${brushSize * zoom}'><circle cx='${brushSize * zoom / 2}' cy='${brushSize * zoom / 2}' r='${brushSize * zoom / 2 - 2}' fill='none' stroke='rgba(13, 13, 13, 0.6)' stroke-width='4' /></svg>`;  */\n        return` <img src=\"//placehold.it/200?text=Cursor\" alt=\"Cursor\" style=\"width: ${brushSize * zoom}px;height:${brushSize * zoom}px\" class=\"cursor\" />`\n    }, [brushSize, zoom]);\n\n    // Update/move the cursor as the mouse is moved\n    const updateCursor = useCallback((event) => {\n        if (cursorRef.current && canvasContainer.current) {\n            const boundingRects = canvasContainer.current.getBoundingClientRect();\n\n            // If the cursor is outside the range of the canvas, hide it.\n            if (\n                boundingRects.left > event.clientX\n                || boundingRects.left + canvasContainer.current.clientWidth < event.clientX\n                || boundingRects.top > event.clientY\n                || boundingRects.top + canvasContainer.current.clientHeight < event.clientY\n            ) {\n                cursorRef.current.style.display = 'none';\n            } else {\n                cursorRef.current.style.display = 'block';\n            }\n\n            // Move the cursor, compensating for the size of the cursor image to ensure it is centered.\n            cursorRef.current.innerHTML = cursor;\n           /*  if (brushSize === 3) {\n                if (zoom === 1.5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 11}px`;\n                } else if (zoom === 2.0) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 10}px`;\n                } else if (zoom === 2.5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 10}px`;\n                } else if (zoom === 3) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 8}px`;\n                } else if (zoom === 3.5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 8}px`;\n                } else if (zoom === 4) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 8}px`;\n                } else if (zoom === 4.5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 6}px`;\n                } else if (zoom === 5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 4}px`;\n                }\n\n            } else if (brushSize === 6) {\n                if (zoom === 1) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 10}px`;\n                } else if (zoom === 1.5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 8}px`;\n                } else if (zoom === 2.0) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 7}px`;\n                } else if (zoom === 2.5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 6}px`;\n                } else if (zoom === 3.0) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 4}px`;\n                } else if (zoom === 3.5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 2}px`;\n                }else if (zoom === 4.0) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 1}px`;\n                }\n                else {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2))}px`;\n                }\n            } else if (brushSize === 9) {\n                if (zoom === 1) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 8}px`;\n                } else if (zoom === 1.5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 8}px`;\n                } else if (zoom === 2.0) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 3}px`;\n                } else if (zoom === 2.5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 2}px`;\n                }\n                else {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2))}px`;\n                }\n            }\n            else if (brushSize === 12) {\n                if (zoom === 1) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 6}px`;\n                } else if (zoom === 1.5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 4}px`;\n                }\n                else {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2))}px`;\n                }\n            }\n            else if (brushSize === 15) {\n                if (zoom === 1) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 5}px`;\n                } else if (zoom === 1.5) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 2}px`;\n                }\n                else {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2))}px`;\n                }\n            } else if (brushSize === 18) {\n                if (zoom === 1) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 4}px`;\n                } else {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2))}px`;\n                }\n            } else if (brushSize === 21) {\n                if (zoom === 1) {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2)) - 2}px`;\n                } else {\n                    cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2))}px`;\n                }\n            }\n            else {\n                cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2))}px`;\n            }\n            cursorRef.current.style.left = `${event.pageX - (brushSize * zoom / 2) - 1}px`; */\n           /*  $(\".cursor\").show().css({\n                \"left\": event.clientX,\n                \"top\": event.clientY\n              }); */\n              cursorRef.current.style.top = `${event.pageY - (brushSize * (zoom / 2))}px`\n              cursorRef.current.style.left = `${event.pageX - (brushSize * zoom / 2)}px`\n        }\n    }, [cursor, cursorRef, canvasContainer, brushSize]);\n\n    // Init the canvas ref on load\n    useEffect(() => {\n        if (canvasRef.current) {\n            const renderCtx = canvasRef.current.getContext('2d');\n\n            if (renderCtx) {\n                setContext(renderCtx);\n            }\n        }\n    }, [context]);\n\n    // Init the (hidden) image container canvas ref on load\n    useEffect(() => {\n        if (originalImageCanvasRef.current) {\n            const renderCtx = originalImageCanvasRef.current.getContext('2d');\n\n            if (renderCtx) {\n                setOriginalImageContext(renderCtx);\n            }\n        }\n    }, [originalImageContext]);\n\n    // Init image blur\n    const [imgBlur, setBlur] = useState(0);\n\n    // Calculate how big the container should be: if the image is landscape, make the width 400px and the height\n    // to match the aspect ratio; if the image is portrait, make the height 400px and match the width.\n    const divSizing = useMemo(() => {\n        return {\n            width: (\n                originalImage.current ? orientation === Orientation.Horizontal\n                    ? 400 * originalImage.current.width / originalImage.current.height\n                    : 400 : 0)\n                || 0,\n            height: (\n                originalImage.current ? orientation === Orientation.Vertical\n                    ? 400 * originalImage.current.height / originalImage.current.width\n                    : 400 : 0\n            ) || 0,\n        };\n    }, [originalImage, removedImage, orientation, originalImageCanvasRef.current?.width, originalImageCanvasRef.current?.height]);\n\n    // Function to clear the main canvas\n    const clearCanvas = useCallback(() => {\n        if (context) {\n            context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n        }\n    }, [context]);\n\n    // Main redrawing function\n    const [patternLoaded, setPatternLoaded] = useState(0);\n    const draw = useCallback(\n        (force: boolean = false, subtractBackground: boolean = false) => {\n            // Check if everything is initialised (for TS's sanity)\n            if (context\n                && originalImageCanvasRef.current\n                && originalImage.current\n                && removedImage.current\n                && patternLoaded\n                && zoomedNewImageCanvasRef.current\n            ) {\n                // Load in the background image and foreground images as patterns, so we can use them in the\n                // brush.\n                const pattern = context.createPattern(originalImageCanvasRef.current, 'no-repeat');\n                const newPattern = context.createPattern(zoomedNewImageCanvasRef.current, 'no-repeat');\n\n                if (pattern && newPattern) {\n                    context.lineJoin = 'round';\n\n                    const newDrawnPos = drawnPos;\n                    let changedDrawnPos = false;\n                    // If forced, redraw everything (alternative to providing force=true attribute).\n                    const forced = drawnPos.some(e => e.force);\n                    drawnPos\n                        // By default, only draw lines that haven't already been drawn to optimise performance (i.e.\n                        // don't redraw every line on every render). But if we're forced to, then allow all lines to be\n                        // drawn.\n                        .filter(pos => forced || force || !pos.drawn)\n                        .forEach((pos) => {\n                            if (canvasRef.current) {\n                                const newContext = canvasRef.current.getContext('2d');\n\n                                if (newContext) {\n                                    newContext.lineWidth = pos.brushSize * zoom;\n                                    if (!pos.undone) {\n                                        if (pos.mode === ToolMode.Restore) {\n                                            newContext.globalCompositeOperation = 'source-over';\n                                            newContext.strokeStyle = pattern;\n                                        } else {\n                                            newContext.strokeStyle = newPattern;\n\n                                            // If we're told to make the background transparent instead of using the\n                                            // background image, use 'destination-out' to 'cut a hole' in the canvas\n                                            // instead of using the pattern we made before.\n                                            if (subtractBackground) {\n                                                newContext.strokeStyle = 'rgb(0, 0, 0)';\n                                                newContext.globalCompositeOperation = 'destination-out';\n                                            }\n                                        }\n\n                                        newContext.beginPath();\n\n                                        if (pos.isNewLine) {\n                                            // If starting a new line, move from 1px to the left to here, so a dot\n                                            // appears as confirmation of drag start\n                                            newContext.moveTo(pos.x * zoom - 1, pos.y * zoom);\n                                        } else {\n                                            // Otherwise, just move to the previous/next point (adapting for zoom)\n                                            newContext.moveTo(\n                                                drawnPos[pos.index - 1].x * zoom,\n                                                drawnPos[pos.index - 1].y * zoom,\n                                            );\n                                        }\n\n                                        // Move to the current point from the previous point\n                                        newContext.lineTo(pos.x * zoom, pos.y * zoom);\n                                        newContext.closePath();\n                                        newContext.stroke();\n\n                                        newDrawnPos[pos.index].drawn = true;\n\n                                        changedDrawnPos = true;\n                                    }\n                                }\n                            }\n                        });\n\n                    // Undo all forcing for the next draw cycle\n                    if (changedDrawnPos) {\n                        setDrawnPos(newDrawnPos.map(item => ({ ...item, force: false })));\n                    }\n                }\n            }\n        },\n        [context, zoom, drawnPos, canvasRef, originalImage, originalImageCanvasRef, removedImage, patternLoaded, newImageCanvasRef],\n    );\n\n    // Fill the main canvas with the image from the hidden canvas containing the foreground image (the one\n    // returned from the API)\n    const insertForegroundImage = useCallback(() => {\n        if (context && removedImage.current) {\n            context.drawImage(\n                removedImage.current,\n                0,\n                0,\n                divSizing.width * zoom,\n                divSizing.height * zoom,\n            );\n        }\n    }, [context, zoom, removedImage, canvasRef, divSizing]);\n\n    // Redraw everything by clearing the canvas, (optionally) loading the background image back in and force-redrawing\n    // all lines \n    const forceRedraw = useCallback((ignoreBackground: boolean = false) => {\n        if (context && zoomedNewImageCanvasRef.current) {\n            clearCanvas();\n\n            if (!ignoreBackground) {\n                context.drawImage(zoomedNewImageCanvasRef.current, 0, 0);\n            }\n\n            insertForegroundImage();\n            draw(true, backgroundIsTransparent && ignoreBackground);\n        }\n    }, [context, clearCanvas, draw, zoomedNewImageCanvasRef, insertForegroundImage, backgroundIsTransparent]);\n\n    // Handle loading of the images from the API\n    const onImageLoad = useCallback(\n        () => {\n            // Ensure everything is initialised\n            if (\n                originalImage.current\n                && originalImageCanvasRef.current\n                && canvasRef.current\n                && originalImage.current.width > 0\n                && originalImage.current.height > 0\n                && newImageCanvasRef.current\n                && zoomedNewImageCanvasRef.current\n                && patternLoaded < 3\n            ) {\n                // Set orientation and initial widths of everything (we don't need to worry about zooming at this stage)\n                if (originalImage.current.height > originalImage.current.width) {\n                    setOrientation(Orientation.Vertical);\n                    canvasRef.current.width = 400;\n                    canvasRef.current.height = 400 * originalImage.current.height / originalImage.current.width;\n                } else {\n                    setOrientation(Orientation.Horizontal);\n                    canvasRef.current.height = 400;\n                    canvasRef.current.width = 400 * originalImage.current.width / originalImage.current.height;\n                }\n\n                // Load in the transparent background texture (this is on page load, so this is the default)\n                const newImageCanvasContext = newImageCanvasRef.current.getContext('2d');\n                if (newImageCanvasContext && transparentImage.current) {\n                    newImageCanvasRef.current.width = canvasRef.current.width;\n                    newImageCanvasRef.current.height = canvasRef.current.height;\n\n                    // Repeat the pattern, instead of scaling it to fill the background. This has the effect\n                    // of making the background squares remain the same size, even when the main canvas is zoomed.\n                    const transparentPattern = newImageCanvasContext.createPattern(\n                        transparentImage.current,\n                        'repeat',\n                    );\n                    if (transparentPattern) {\n                        newImageCanvasContext.fillStyle = transparentPattern;\n                    }\n                    newImageCanvasContext.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n                }\n               \n\n                if (newImageCanvasRef.current && canvasRef.current ) {\n                    const newImageCanvasContext = newImageCanvasRef.current.getContext('2d');\n                    if (newImageCanvasContext) {\n                        // Fill the background with the color\n                        newImageCanvasContext.fillRect(\n                            0,\n                            0,\n                            newImageCanvasContext.canvas.width,\n                            newImageCanvasContext.canvas.height,\n                        );\n\n                        setBackgroundIsTransparent(false);\n\n                        // Request update of blur & zoomed version\n                        updateZoomedContainer(true);\n                        forceRedraw();\n                    }\n                }\n\n\n                // Initialise the 'zoomed' background container, which contains the background image after\n                // zooming/blurring operations\n                const zoomedNewImageCanvasContext = zoomedNewImageCanvasRef.current.getContext('2d');\n                if (zoomedNewImageCanvasContext) {\n                    zoomedNewImageCanvasRef.current.width = canvasRef.current.width;\n                    zoomedNewImageCanvasRef.current.height = canvasRef.current.height;\n                    zoomedNewImageCanvasContext.drawImage(newImageCanvasRef.current, 0, 0);\n                }\n\n                originalImageCanvasRef.current.width = canvasRef.current.width;\n                originalImageCanvasRef.current.height = canvasRef.current.height;\n                originalImageCanvasRef.current.getContext('2d')?.drawImage(\n                    originalImage.current,\n                    0,\n                    0,\n                    canvasRef.current.width,\n                    canvasRef.current.height,\n                );\n\n                // Draw everything, and update the load state (there are three load states, and we need to repeat\n                // this for each of them, since we don't know which one will load first/last.)\n                forceRedraw();\n                setPatternLoaded(patternLoaded + 1);\n\n            }\n        },\n        [originalImageContext, zoomedNewImageCanvasRef, patternLoaded, forceRedraw, originalImage, originalImageCanvasRef, canvasRef, transparentImage, newImageCanvasRef],\n    );\n\n    const [drawing, setDrawing] = useState(false);\n    // Handle the drawing start\n    const handleDragStart = useCallback((event) => {\n        if (canvasRef.current && canvasContainer.current) {\n            console.log('handleDragStart')\n            setDrawing(true);\n            const filtered = drawnPos.filter(pos => !pos.undone);\n            setDrawnPos(\n                [\n                    ...filtered\n                        .map((pos, index) => ({ ...pos, index })),\n                    {\n                        // Push a new line, marking it with `isNewLink: true`\n                        x: (event.pageX - canvasRef.current.offsetLeft + canvasContainer.current.scrollLeft) / zoom,\n                        y: (event.pageY - canvasRef.current.offsetTop + canvasContainer.current.scrollTop) / zoom,\n                        isNewLine: true,\n                        brushSize,\n                        mode,\n                        drawn: false,\n                        index: filtered.length,\n                    },\n                ],\n            );\n        }\n    }, [drawnPos, canvasRef, mode, brushSize, zoom]);\n\n    const handleMouseMove = useCallback((event) => {\n        // If we're drawing (i.e. a click event has been detected, and no mouseup event has been detected)\n        if (drawing && canvasRef.current && canvasContainer.current) {\n            setDrawnPos(\n                [\n                    ...drawnPos,\n                    {\n                        // Push a continuation of the previous line, marking it with `isNewLink: false`\n                        x: (event.pageX - canvasRef.current.offsetLeft + canvasContainer.current.scrollLeft) / zoom,\n                        y: (event.pageY - canvasRef.current.offsetTop + canvasContainer.current.scrollTop) / zoom,\n                        isNewLine: false,\n                        brushSize,\n                        mode,\n                        drawn: false,\n                        index: drawnPos.length,\n                    },\n                ],\n            );\n        }\n    }, [drawing, drawnPos, canvasRef, mode, brushSize]);\n\n    // On drag end, break out of drawing mode.\n    const handleDragEnd = useCallback(() => {\n        setDrawing(false);\n    }, []);\n\n    useEffect(() => {\n        if (patternLoaded) {\n            forceRedraw();\n        }\n    }, [patternLoaded]);\n\n    // Whenever a new line is added, draw it.\n    useEffect(() => {\n        draw(false);\n    }, [drawnPos]);\n\n    // forceNotTransparent can be true (force it), false (don't force anything), or -1 (force transparency)\n    const updateZoomedContainer = useCallback((forceNotTransparent: boolean | -1 = false) => {\n        if (zoomedNewImageCanvasRef.current && originalImage.current) {\n            // Update the canvas size to make sure it's up-to-date\n            zoomedNewImageCanvasRef.current.width = divSizing.width * zoom;\n            zoomedNewImageCanvasRef.current.height = divSizing.height * zoom;\n\n            const zoomedNewImageCanvasContext = zoomedNewImageCanvasRef.current.getContext('2d');\n\n            if (zoomedNewImageCanvasContext && newImageCanvasRef.current && transparentImage.current) {\n                // Get the not-zoomed image\n                const transparentPattern = zoomedNewImageCanvasContext.createPattern(\n                    transparentImage.current,\n                    'repeat',\n                );\n                if (transparentPattern && ((backgroundIsTransparent && !forceNotTransparent) || forceNotTransparent === -1)) {\n                    // If the background is transparent, use a fill instead of an image to keep the size of the\n                    // grid squares the same, and ensure that there is no blurring - the grid should never\n                    // be rescaled/blurred because it's just an indicator, not a background image.\n                    zoomedNewImageCanvasContext.filter = 'none';\n                    zoomedNewImageCanvasContext.fillStyle = transparentPattern;\n                    zoomedNewImageCanvasContext.fillRect(\n                        0,\n                        0,\n                        divSizing.width * zoom,\n                        divSizing.height * zoom,\n                    );\n                } else {\n                    // If we're dealing with a proper, non-transparent background, add the blur as necessary\n                    // and draw the image to fill the background.\n                    zoomedNewImageCanvasContext.filter = `blur(${imgBlur * zoom}px)`;\n                    zoomedNewImageCanvasContext.drawImage(\n                        newImageCanvasRef.current,\n                        0,\n                        0,\n                        divSizing.width * zoom,\n                        divSizing.height * zoom,\n                    );\n                }\n            }\n        }\n    }, [zoom, zoomedNewImageCanvasRef, newImageCanvasRef, divSizing, backgroundIsTransparent, imgBlur]);\n    const readSaveStateImage = (file: any) => {\n        setReadSaveImage(file)\n        const fileReader = new FileReader();\n        fileReader.onload = (event) => {\n            if (event?.target?.result) {\n                // Read the file, and load it into an image\n                const image = new Image();\n                image.onload = () => {\n                    if (newImageCanvasRef.current && originalImage.current) {\n                        const newImageCanvasContext = newImageCanvasRef.current.getContext('2d');\n                        if (newImageCanvasContext) {\n                            // Clear the canvas\n                            newImageCanvasContext.clearRect(\n                                0,\n                                0,\n                                newImageCanvasContext.canvas.width,\n                                newImageCanvasContext.canvas.height,\n                            );\n                            // Load the new image into the (hidden) background image container, accounting for\n                            // whether it is portrait or landscape to match the aspect ratio of the foreground\n                            // image, and centering it into the middle of the container.\n                            if ((image.width / image.height) > (divSizing.width / divSizing.height)) {\n                                newImageCanvasContext.drawImage(\n                                    image,\n                                    -(\n                                        (divSizing.height / image.height)\n                                        * image.width / 2 - divSizing.width / 2\n                                    ),\n                                    0,\n                                    (divSizing.height / image.height) * image.width,\n                                    divSizing.height,\n                                );\n                            } else {\n                                newImageCanvasContext.drawImage(\n                                    image,\n                                    0,\n                                    -(\n                                        (divSizing.width / image.width)\n                                        * image.height / 2 - divSizing.height / 2\n                                    ),\n                                    divSizing.width,\n                                    (divSizing.width / image.width) * image.height,\n                                );\n                            }\n\n                            setBackgroundIsTransparent(false);\n                            // Request the zoomed background image container to update, which also accounts for\n                            // zoom and blur\n                            updateZoomedContainer(true);\n\n                            forceRedraw();\n                        }\n                    }\n                };\n\n                const result = event.target.result;\n                if (result && typeof result === 'string') {\n                    image.src = result;\n                }\n            }\n        };\n\n        // Read the image\n        fileReader.readAsDataURL(file);\n    }\n    // Handles upload of replacement background images\n    const readImage = useCallback((filePickerEvent: React.ChangeEvent<HTMLInputElement>) => {\n        if (!filePickerEvent.target || !filePickerEvent.target.files || !filePickerEvent.target.files[0]) return;\n        setColor('')\n        const fileReader = new FileReader();\n        fileReader.onload = (event) => {\n            if (event?.target?.result) {\n                // Read the file, and load it into an image\n                const image = new Image();\n                image.onload = () => {\n                    if (newImageCanvasRef.current && originalImage.current) {\n                        const newImageCanvasContext = newImageCanvasRef.current.getContext('2d');\n                        if (newImageCanvasContext) {\n                            // Clear the canvas\n                            newImageCanvasContext.clearRect(\n                                0,\n                                0,\n                                newImageCanvasContext.canvas.width,\n                                newImageCanvasContext.canvas.height,\n                            );\n                            // Load the new image into the (hidden) background image container, accounting for\n                            // whether it is portrait or landscape to match the aspect ratio of the foreground\n                            // image, and centering it into the middle of the container.\n                            if ((image.width / image.height) > (divSizing.width / divSizing.height)) {\n                                newImageCanvasContext.drawImage(\n                                    image,\n                                    -(\n                                        (divSizing.height / image.height)\n                                        * image.width / 2 - divSizing.width / 2\n                                    ),\n                                    0,\n                                    (divSizing.height / image.height) * image.width,\n                                    divSizing.height,\n                                );\n                            } else {\n                                newImageCanvasContext.drawImage(\n                                    image,\n                                    0,\n                                    -(\n                                        (divSizing.width / image.width)\n                                        * image.height / 2 - divSizing.height / 2\n                                    ),\n                                    divSizing.width,\n                                    (divSizing.width / image.width) * image.height,\n                                );\n                            }\n\n                            setBackgroundIsTransparent(false);\n                            // Request the zoomed background image container to update, which also accounts for\n                            // zoom and blur\n                            updateZoomedContainer(true);\n\n                            forceRedraw();\n                        }\n                    }\n                };\n\n                const result = event.target.result;\n                if (result && typeof result === 'string') {\n                    image.src = result;\n                }\n            }\n        };\n\n        // Read the image\n        setReadSaveImage(filePickerEvent.target.files[0])\n        fileReader.readAsDataURL(filePickerEvent.target.files[0]);\n\n        // Clear the file picker, so the same image can be uploaded if necessary and still trigger a 'change' event\n        filePickerEvent.target.files = null;\n        filePickerEvent.target.value = '';\n    }, [newImageCanvasRef, context, canvasRef, draw, forceRedraw, updateZoomedContainer, divSizing]);\n\n    const setColoredBackground = useCallback((event) => {\n        setReadSaveImage(null)\n        setColor(event.target.value)\n        if (newImageCanvasRef.current && canvasRef.current) {\n            const newImageCanvasContext = newImageCanvasRef.current.getContext('2d');\n            if (newImageCanvasContext) {\n                // Fill the background with the color\n                newImageCanvasContext.fillStyle = event.target.value;\n                newImageCanvasContext.fillRect(\n                    0,\n                    0,\n                    newImageCanvasContext.canvas.width,\n                    newImageCanvasContext.canvas.height,\n                );\n\n                setBackgroundIsTransparent(false);\n\n                // Request update of blur & zoomed version\n                updateZoomedContainer(true);\n                forceRedraw();\n            }\n        }\n    }, [newImageCanvasRef, canvasRef, context, draw, forceRedraw]);\n\n    const undo = useCallback(() => {\n        // If there's nothing to undo, exit early\n        if (!drawnPos.filter(e => !e.undone).length) return;\n\n        // Find the last new line that was started\n        const lastNewLine = drawnPos.reduce((a, e, i) => e.isNewLine && !e.undone ? i : a, 0);\n        if (context && zoomedNewImageCanvasRef.current) {\n            // Redraw everything\n            clearCanvas();\n            context.drawImage(zoomedNewImageCanvasRef.current, 0, 0);\n            insertForegroundImage();\n\n            setDrawnPos(\n                [\n                    // Mark everything since the start of the lastest, non-undone line as 'undone' (hidden)\n                    ...drawnPos.slice(0, lastNewLine),\n                    ...drawnPos.slice(lastNewLine).map(pos => ({\n                        ...pos,\n                        undone: true,\n                        force: true, // Mark it as force: true, so when the setState finishes, it will be forced.\n                    })),\n                ],\n            );\n        }\n    }, [forceRedraw, drawnPos, clearCanvas, zoomedNewImageCanvasRef]);\n\n    const redo = useCallback(() => {\n        if (!drawnPos.filter(e => e.undone).length) return;\n\n        // Find all of the lines that were undone\n        const newLines = drawnPos\n            .map((e, i) => e.isNewLine && e.undone ? i : -1)\n            .filter(e => e !== -1);\n        if (context && zoomedNewImageCanvasRef.current) {\n            clearCanvas();\n            context.drawImage(zoomedNewImageCanvasRef.current, 0, 0);\n            insertForegroundImage();\n\n            setDrawnPos(\n                [\n                    // Mark everything between the first and second undone lines as not-undone\n                    ...drawnPos.slice(0, newLines[0]),\n                    ...drawnPos.slice(newLines[0], newLines[1] || undefined).map(pos => ({\n                        ...pos,\n                        undone: false,\n                        force: true,\n                    })),\n                    ...drawnPos.slice(newLines[1] || drawnPos.length),\n                ],\n            );\n        }\n    }, [forceRedraw, drawnPos, clearCanvas, zoomedNewImageCanvasRef]);\n\n    // Because of the delay with setState, we need an alternative approach to prepare an image for downloading,\n    // since otherwise we can't properly await the background being cleared and the zooming being set. So, we just\n    // do one of the two (zooming), and leave a variable (not a state) to do the rest when a useEffect detects the\n    // zoom as complete.\n    const download = useCallback(() => {\n        if (canvasRef.current && originalImage.current) {\n            waitingOnDownload = zoom;\n\n            // Zoom in the canvas to the original size, so that the resolutions match\n            setZoom(originalImage.current.width / divSizing.width);\n        }\n    }, [canvasRef, zoom, backgroundIsTransparent, setColoredBackground, clearCanvas, forceRedraw, originalImage]);\n\n    // On zoom change\n    useEffect(() => {\n        // Update the sizing of the canvas, and scroll to the center\n        if (canvasRef.current && canvasContainer.current) {\n            canvasRef.current.width = divSizing.width * zoom;\n            canvasRef.current.height = divSizing.height * zoom;\n\n            canvasContainer.current.scrollLeft = divSizing.width * (zoom - 1) / 2;\n            canvasContainer.current.scrollTop = divSizing.height * (zoom - 1) / 2;\n        }\n\n        // Draw the foreground image, but scaled as per the zoom\n        if (originalImage.current && originalImageContext && originalImageCanvasRef.current) {\n            originalImageCanvasRef.current.width = divSizing.width * zoom;\n            originalImageCanvasRef.current.height = divSizing.height * zoom;\n            originalImageContext.drawImage(\n                originalImage.current,\n                0,\n                0,\n                divSizing.width * zoom,\n                divSizing.height * zoom,\n            );\n            updateZoomedContainer();\n        }\n\n        // Redraw everything\n        forceRedraw();\n        setDrawnPos(\n            drawnPos.map(pos => ({ ...pos, force: true })),\n        );\n\n        if (waitingOnDownload && canvasRef.current) {\n            // Redraw everything without the background grid if it's transparent (because we don't want the\n            // grid to be visible in the export)\n            if (backgroundIsTransparent) {\n                forceRedraw(true);\n            }\n\n            // Download it (using an NPM module)\n            triggerBase64Download(canvasRef.current.toDataURL('image/png', 1.0), 'background-removal-edit');\n\n            // 'Clear' the background, i.e. put the transparent grid back.\n            if (backgroundIsTransparent) {\n                clearBackgroundColor();\n            }\n\n            // Redraw everything\n            updateZoomedContainer();\n            forceRedraw();\n\n            // Reset the zoom to what it was before downloading began\n            setZoom(waitingOnDownload);\n            waitingOnDownload = 0;\n        }\n        if (waitingOnSave && canvasRef.current) {\n            // Redraw everything without the background grid if it's transparent (because we don't want the\n            // grid to be visible in the export)\n            if (backgroundIsTransparent) {\n                forceRedraw(true);\n            }\n\n            // save it\n          /*   saveFun(canvasRef.current.toDataURL('image/png', 1.0), editor.editor.idx, { drawnPos, mode, color, image: readSaveImage, blur: imgBlur }) */\n\n            // 'Clear' the background, i.e. put the transparent grid back.\n            if (backgroundIsTransparent) {\n                clearBackgroundColor();\n            }\n\n            // Redraw everything\n            updateZoomedContainer();\n            forceRedraw();\n\n            // Reset the zoom to what it was before downloading began\n            setZoom(waitingOnSave);\n            waitingOnSave = 0;\n        }\n    }, [zoom]);\n\n    const clearBackgroundColor = useCallback(() => {\n        setColor('')\n        setReadSaveImage(null)\n        if (newImageCanvasRef.current) {\n            const newImageCanvasContext = newImageCanvasRef.current.getContext('2d');\n\n            if (newImageCanvasContext && transparentImage.current) {\n                // Draw the transparency grid\n                const transparentPattern = newImageCanvasContext.createPattern(\n                    transparentImage.current,\n                    'repeat',\n                );\n                if (transparentPattern) {\n                    newImageCanvasContext.fillStyle = transparentPattern;\n                    newImageCanvasContext.fillRect(\n                        0,\n                        0,\n                        newImageCanvasContext.canvas.width,\n                        newImageCanvasContext.canvas.height,\n                    );\n\n                    // Mark the background as transparent\n                    setBackgroundIsTransparent(true);\n\n                    // Force the zoom container to work as transparent, even if the setBackgroundIsTransparent\n                    // setState hasn't completed yet\n                    updateZoomedContainer(-1);\n                    forceRedraw();\n                }\n            }\n        }\n    }, [newImageCanvasRef, transparentImage, updateZoomedContainer, forceRedraw]);\n\n    // When the blur updates, redraw everything\n    useEffect(() => {\n        updateZoomedContainer();\n        forceRedraw();\n    }, [imgBlur, backgroundIsTransparent]);\n    const openColorPanel = () => {\n        if (colorRef.current) {\n            colorRef.current.click()\n        }\n    }\n    const openPhoto = () => {\n        if (photoRef.current) {\n            photoRef.current.click()\n        }\n    }\n    const imgButtonWidth = 90;\n    const imgButtonHeight = 90;\n    // Work out the placement of the foreground image over the image icon buttons\n    const imgButtonStyles = {\n        width: originalImage.current ? (\n            // If it's landscape, define the width and leave the height to auto\n            originalImage.current.width > originalImage.current.height\n                ? undefined\n                : imgButtonWidth\n        ) : 0,\n        height: originalImage.current ? (\n            // If it's portrait, define the height and leave the width to auto\n            originalImage.current.height >= originalImage.current.width\n                ? undefined\n                : imgButtonHeight\n        ) : 0,\n        // Align it to be in the center\n        left: originalImage.current ? (\n            originalImage.current.width > originalImage.current.height\n                ? -(\n                    (imgButtonHeight / originalImage.current.height)\n                    * originalImage.current.width / 2 - imgButtonWidth / 2\n                )\n                : 0\n        ) : 0,\n        top: originalImage.current ? (\n            originalImage.current.height >= originalImage.current.width\n                ? -(\n                    (imgButtonWidth / originalImage.current.width)\n                    * originalImage.current.height / 2 - imgButtonHeight / 2\n                )\n                : 0\n        ) : 0,\n    };\n    const saveButton = useCallback(() => {\n        if (canvasRef.current && originalImage.current) {\n            waitingOnSave = zoom;\n\n            // Zoom in the canvas to the original size, so that the resolutions match\n            setZoom(originalImage.current.width / divSizing.width);\n        }\n    }, [canvasRef, zoom, backgroundIsTransparent, setColoredBackground, clearCanvas, forceRedraw, originalImage]);\n\n\n    return (\n        <>\n\n            <div\n                className='editorSection py-5 d-flex'>\n                <div className=\"d-flex editor-inner m-auto\">\n                    <div className=\"p-2\">\n                        <div className=\"row\">\n                            <div className=\"col-md-8\">\n                                <div className='zoom-range d-flex'>\n                                    <button className=\"minus mr-2\" onClick={() => zoom >= 1.5 && setZoom(zoom - 0.5)}>\n                                        <i className=\"fas fa-minus\"></i>\n                                    </button>\n                                    <input\n                                        type='text'\n                                        readOnly={true}\n                                        value={`${zoom.toFixed(1)}x`}\n                                    />\n                                    <button className=\"plus ml-2\" onClick={() => zoom <= 4.5 && setZoom(zoom + 0.5)}>\n                                        <i className=\"fas fa-plus\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"col-md-4\">\n                                <div className=\"rotate-container text-right\">\n                                    <button className=\"rotate-left mr-1\" onClick={undo}>\n                                        <i className=\"fas fa-undo\"></i>\n                                    </button>\n                                    <button className=\"rotate-right\" onClick={redo}>\n                                        <i className=\"fas fa-redo\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"editor-img-area\">\n                         <div\n                                    id='cursor'\n                                    ref={cursorRef}\n                                    onMouseMove={(e) => {\n                                        handleMouseMove(e);\n                                        updateCursor(e);\n                                    }}\n                                    onMouseDown={handleDragStart}\n                                    onMouseUp={handleDragEnd}\n                                ></div> \n                            <div\n                                style={{\n                                    width: divSizing.width - 1,\n                                    height: divSizing.height,\n                                    overflow: zoom > 1 ? 'auto' : 'hidden'\n                                }}\n                                className='canvas-container'\n                                ref={canvasContainer}\n                                onMouseMove={(e) => {\n                                    handleMouseMove(e);\n                                    updateCursor(e);\n                                }}\n                            >\n                               \n                                <canvas\n                                    className=\"canvas\"\n                                    ref={canvasRef}\n                                    onMouseDown={handleDragStart}\n                                    onMouseMove={handleMouseMove}\n                                    onMouseUp={handleDragEnd}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"row justify-content-center\">\n                            <div className=\"col-md-4 text-right pr-0\">\n                                <button className=\"btn btn-primary\" onClick={download}>Download</button>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div className=\"pr-0\">\n                        <div className=\"text-right mb-2\">\n                            <button className=\"close-btn\" onClick={()=>window.location.replace(`${editor.editor.link}`)}>\n                                <i className=\"fas fa-times\"></i>\n                            </button>\n                        </div>\n                        <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#home\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\"><h5><i className=\"fas fa-layer-group mr-2\"></i>BACKGROUND</h5></a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link\" id=\"contact-tab\" data-toggle=\"tab\" href=\"#contact\" role=\"tab\" aria-controls=\"contact\" aria-selected=\"false\"><h5><i className=\"fas fa-paint-brush mr-2\"></i>ERASER / RESTORE</h5></a>\n                            </li>\n                        </ul>\n                        <div className=\"tab-content\" id=\"myTabContent\">\n                            <div className=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n                                <div className=\"p-3 text-center\">\n                                    <div className=\"mb-2 text-left\">\n                                        <small>Blur</small>\n                                    </div>\n                                    <div className='zoom-range d-flex'>\n                                        <button className=\"minus mr-2\" onClick={() => imgBlur >= 1 && setBlur(imgBlur - 1)}>\n                                            <i className=\"fas fa-minus\"></i>\n                                        </button>\n                                        <input\n                                            type='text'\n                                            readOnly={true}\n                                            value={`${imgBlur}px`}\n                                        />\n                                        <button className=\"plus ml-2\" ref={blurRef} onClick={() => imgBlur <= 9 && setBlur(imgBlur + 1)}>\n                                            <i className=\"fas fa-plus\"></i>\n                                        </button>\n                                    </div>\n                                    <div className=\"mt-3 text-center\">\n                                        <div className=\"toggle-btn\">\n                                            <button className={classnames(\"erase\", { 'eractive': photo })} onClick={() => setPhoto(true)}>Photo</button>\n                                            <button className={classnames(\"restore\", { 'eractive': !photo })} onClick={() => setPhoto(false)}>Color</button>\n                                        </div>\n                                        <div className={classnames(\"mt-3 text-left\", { 'd-none': !photo })}>\n                                            <small>Photo</small>\n                                            <div className=\"row justify-content-left\">\n                                                <div className=\"col-md-3\">\n                                                    <div className=\"upload-photo pt-2\" onClick={openPhoto}>\n                                                        <i className=\"fas fa-cloud-upload-alt\"></i>\n                                                        <div className=\"text\">\n                                                            Select Photo\n                                                                    </div>\n                                                        <input\n                                                            style={{\n                                                                marginTop: '10px',\n                                                                position: 'absolute',\n                                                                marginLeft: '-50px',\n                                                                opacity: 0\n                                                            }}\n                                                            ref={photoRef}\n                                                            type='file'\n                                                            onChange={readImage}\n                                                        />\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-3\">\n                                                    <div className=\"upload-photo p-2\" onClick={clearBackgroundColor}>\n                                                        <img src={transparent} width=\"100%\" height=\"100%\" alt=\"img\" />\n\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-3\"></div>\n                                            </div>\n                                        </div>\n                                        <div className={classnames(\"mt-3 text-left\", { 'd-none': photo })}>\n                                            <small>Color</small>\n                                            <div className=\"row justify-content-left\">\n                                                <div className=\"col-md-3\">\n                                                    <div className=\"upload-photo\" onClick={openColorPanel}>\n                                                        <img src={colors} width=\"100%\" height=\"100%\" alt=\"img\" />\n                                                        <input\n                                                            style={{\n                                                                marginTop: '10px',\n                                                                position: 'absolute',\n                                                                marginLeft: '-50px',\n                                                                opacity: 0\n                                                            }}\n                                                            type='color'\n                                                            ref={colorRef}\n                                                            onChange={setColoredBackground}\n                                                            defaultValue='#ffffff'\n                                                        />\n\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-3\"></div>\n                                                <div className=\"col-md-3\"></div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"tab-pane fade\" id=\"contact\" role=\"tabpanel\" aria-labelledby=\"contact-tab\">\n                                <div className=\"p-3 text-center\">\n                                    <div className=\"toggle-btn\">\n                                        <button className={classnames(\"erase\", { 'eractive': erase })} onClick={() => { setErase(true); setMode(ToolMode.Eraser) }}>Erase</button>\n                                        <button className={classnames(\"restore\", { 'eractive': !erase })} onClick={() => { setErase(false); setMode(ToolMode.Restore) }}>Restore</button>\n                                    </div>\n                                    <div className=\"erslider mt-3\">\n                                        <div className=\"form-group text-left\">\n                                            <small>Brush Size</small>\n\n                                            <input style={{ width: '129px' }} type=\"range\" className=\"form-control-range slider mt-2\" id=\"formControlRange\"\n                                                min={3}\n                                                max={21}\n                                                step={3}\n                                                onChange={(event) => setBrushSize(event.target.valueAsNumber)}\n                                                value={brushSize}\n                                            />\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className='hidden-item-container'>\n                <canvas\n                    ref={originalImageCanvasRef}\n                    className='original-image'\n                />\n                <canvas\n                    ref={newImageCanvasRef}\n                    className='new-image'\n                />\n                <canvas\n                    ref={zoomedNewImageCanvasRef}\n                    className='zoomed-new-image'\n                />\n                {editor.restoredImage ? <img\n                    src={editor.restoredImage}\n                    ref={removedImage}\n                    onLoad={onImageLoad}\n                    className='removed-image'\n                    alt={\"removedimage\"}\n                /> : <img\n                        src={remImage}\n                        ref={removedImage}\n                        onLoad={onImageLoad}\n                        className='removed-image'\n                        alt={\"removedimage\"}\n                    />\n\n                }\n\n                <img\n                    src={orgImage}\n                    ref={originalImage}\n                    onLoad={onImageLoad}\n                    className='original-image'\n                    alt={\"originalimage\"}\n                />\n                <img\n                    src={transparent}\n                    ref={transparentImage}\n                    onLoad={onImageLoad}\n                    className='transparent-image'\n                    alt={\"transparentimage\"}\n                />\n            </div>\n\n        </>\n    );\n};\n","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Navbar.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Settings.js",["193","194","195","196","197","198","199","200"],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ListUsers.js",["201"],"import React, { useState, useEffect } from 'react'\r\nimport TableColumn from './TableColumn';\r\nimport { tbData } from './sample';\r\nimport axios from 'axios'\r\nimport ClientTableColumn from './ClientTableColumn';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { allUsersData } from '../configurations/urls';\r\nimport { setAllUsers } from './../redux/actions/index';\r\n\r\n\r\nconst ListUsers = ({ id,user,single }) => {\r\n    const allUsers = useSelector(state => state.user.allUsersData)\r\n    const dispatch = useDispatch()\r\n    const [data, setData] = useState(allUsers)\r\n    useEffect(() => {\r\n        console.log('user',user)\r\n        if (user.is_admin === false||single===true) {\r\n            setData(tbData)\r\n        } else {\r\n            axios.get(allUsersData)\r\n                .then(res => {\r\n                    dispatch(setAllUsers(res.data))\r\n                    setData(res.data)\r\n                }).catch(err => {\r\n                    console.log(err)\r\n                })\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    const dataSource = data.length > 0 && data.map((d, i) => (d))\r\n    return (\r\n        <>\r\n            {id ? <TableColumn dataSource={dataSource.length > 0 && dataSource.filter(t => t.DealerID === id)} /> : <ClientTableColumn dataSource={dataSource} />}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ListUsers\r\n","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\TableColumn.js",["202","203"],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\Summary.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ManualCutout.js",["204"],"import React from 'react'\r\nimport { Upload, message } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nimport { sendToEditor } from './../Actions/index';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport axios from 'axios'\r\nconst { Dragger } = Upload;\r\n\r\n\r\n\r\nconst ManualCutout = (props) => {\r\n    const dispatch = useDispatch()\r\n   \r\n    const uploadImage = (options) => {\r\n        const { onSuccess, file } = options;\r\n        const formData=new FormData()\r\n        formData.append('image',file)\r\n        axios.post('http://3.138.211.235:8000/bgremove/result/', formData)\r\n            .then(res => {\r\n                \r\n                 dispatch(sendToEditor({ orignalImage: `data:image/png;base64,${res.data.original}`, removedImage: `data:image/png;base64,${res.data.image_data}`,link:props.location.pathname }))\r\n                props.history.push('/editor') \r\n                onSuccess(file)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-6\">\r\n                    <Dragger customRequest={uploadImage}>\r\n                        <p className=\"ant-upload-drag-icon\">\r\n                            <InboxOutlined />\r\n                        </p>\r\n                        <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n                        <p className=\"ant-upload-hint\">\r\n                            Support for a single. Strictly prohibit from uploading company data or other\r\n                            band files\r\n                        </p>\r\n                    </Dragger>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(connect(null, { sendToEditor })(ManualCutout))\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\configurations\\urls.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\Actions\\types.tsx",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\editor\\types.ts",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\sample.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\TableComp.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\redux\\actions\\actionTypes.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\Actions\\index.tsx",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\CheckMail.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\redux\\reducers\\index.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\PrivateRoute.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\utils\\setAuthToken.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\redux\\actions\\index.js",[],"C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ResetPassword.js",["205"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Input, Button } from 'antd';\r\nimport Navbar from './Navbar';\r\nimport { withRouter,useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { LOG_IN_JWT } from '../configurations/urls';\r\nimport { createNewPassword } from './../configurations/urls';\r\n\r\nconst ResetPassword = ({ user, history }) => {\r\n    const [error, setError] = useState('')\r\n    const { uid, token } = useParams();\r\n\r\n    useEffect(() => {\r\n        const userCreds = JSON.parse(localStorage.getItem('userCreds'))\r\n        if (userCreds && userCreds.access) {\r\n            history.push('/public')\r\n        }\r\n    })\r\n    const onFinish = (values) => {\r\n        console.log('values', values)\r\n        axios.post(createNewPassword, { uid, token, new_password: values.password, re_new_password: values.confirm })\r\n            .then(res => {\r\n                \r\n                history.push('/login')\r\n            })\r\n            .catch(err => setError(true))\r\n    }\r\n\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n    return (\r\n        <>\r\n            <Navbar user={user} />\r\n            <div className=\"container text-center\">\r\n                <h3 className=\"mt-4\">Create new Passoword</h3>\r\n                <div className=\"row pt-3 justify-content-center\">\r\n\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"box\">\r\n                            <Form\r\n                                name=\"basic\"\r\n                                layout=\"vertical\"\r\n                                onChange={() => setError(null)}\r\n                                onFinish={onFinish}\r\n                                onFinishFailed={onFinishFailed}\r\n                            >\r\n                                <Form.Item\r\n                                    label=\"Password\"\r\n                                    name=\"password\"\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please type your new password!',\r\n                                            \r\n                                        },\r\n                                        { min: 8, message: 'Password must be minimum 8 characters.' }\r\n                                    ]}\r\n                                >\r\n                                    <Input.Password />\r\n                                </Form.Item>\r\n\r\n                                <Form.Item\r\n                                    label=\"Confirm Password\"\r\n                                    name=\"confirm\"\r\n                                    dependencies={['password']}\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please confirm your password',\r\n                                        },\r\n                                        ({ getFieldValue }) => ({\r\n                                            validator(_, value) {\r\n                                                if (!value || getFieldValue('password') === value) {\r\n                                                    return Promise.resolve();\r\n                                                }\r\n                                                return Promise.reject('The two passwords that you entered do not match!');\r\n                                            },\r\n                                        }),\r\n                                    ]}\r\n                                >\r\n                                    <Input.Password />\r\n                                </Form.Item>\r\n\r\n\r\n\r\n                                <Form.Item>\r\n                                    <Button type=\"primary\" htmlType=\"submit\">\r\n                                        Create\r\n                                    </Button>\r\n                                </Form.Item>\r\n                                {error && <span className=\"ml-3\" style={{ color: 'red' }}>There is something wrong</span>}\r\n                            </Form>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(ResetPassword)\r\n","C:\\Users\\mrShahbaz\\Desktop\\send_code\\src\\components\\ClientTableColumn.js",["206","207"],{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","severity":1,"message":"213","line":33,"column":8,"nodeType":"214","messageId":"215","endLine":33,"endColumn":17},{"ruleId":"216","severity":1,"message":"217","line":81,"column":6,"nodeType":"218","endLine":81,"endColumn":8,"suggestions":"219"},{"ruleId":"212","severity":1,"message":"220","line":2,"column":52,"nodeType":"214","messageId":"215","endLine":2,"endColumn":59},{"ruleId":"221","severity":1,"message":"222","line":12,"column":15,"nodeType":"223","messageId":"224","endLine":12,"endColumn":38},{"ruleId":"221","severity":1,"message":"222","line":14,"column":16,"nodeType":"223","messageId":"224","endLine":14,"endColumn":48},{"ruleId":"221","severity":1,"message":"222","line":15,"column":17,"nodeType":"223","messageId":"224","endLine":15,"endColumn":50},{"ruleId":"221","severity":1,"message":"222","line":18,"column":16,"nodeType":"223","messageId":"224","endLine":18,"endColumn":60},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","severity":1,"message":"220","line":2,"column":30,"nodeType":"214","messageId":"215","endLine":2,"endColumn":37},{"ruleId":"212","severity":1,"message":"225","line":12,"column":5,"nodeType":"214","messageId":"215","endLine":12,"endColumn":20},{"ruleId":"212","severity":1,"message":"226","line":15,"column":8,"nodeType":"214","messageId":"215","endLine":15,"endColumn":16},{"ruleId":"216","severity":1,"message":"227","line":44,"column":8,"nodeType":"218","endLine":44,"endColumn":18,"suggestions":"228"},{"ruleId":"216","severity":1,"message":"229","line":50,"column":8,"nodeType":"218","endLine":50,"endColumn":10,"suggestions":"230"},{"ruleId":"212","severity":1,"message":"231","line":6,"column":10,"nodeType":"214","messageId":"215","endLine":6,"endColumn":22},{"ruleId":"212","severity":1,"message":"232","line":11,"column":10,"nodeType":"214","messageId":"215","endLine":11,"endColumn":21},{"ruleId":"216","severity":1,"message":"233","line":52,"column":8,"nodeType":"218","endLine":52,"endColumn":16,"suggestions":"234"},{"ruleId":"216","severity":1,"message":"235","line":59,"column":8,"nodeType":"218","endLine":59,"endColumn":10,"suggestions":"236"},{"ruleId":"216","severity":1,"message":"237","line":26,"column":8,"nodeType":"218","endLine":26,"endColumn":10,"suggestions":"238"},{"ruleId":"221","severity":1,"message":"222","line":9,"column":15,"nodeType":"223","messageId":"224","endLine":9,"endColumn":38},{"ruleId":"221","severity":1,"message":"222","line":11,"column":16,"nodeType":"223","messageId":"224","endLine":11,"endColumn":48},{"ruleId":"221","severity":1,"message":"222","line":12,"column":17,"nodeType":"223","messageId":"224","endLine":12,"endColumn":50},{"ruleId":"221","severity":1,"message":"222","line":15,"column":16,"nodeType":"223","messageId":"224","endLine":15,"endColumn":60},{"ruleId":"239","severity":1,"message":"240","line":13,"column":11,"nodeType":"214","messageId":"215","endLine":13,"endColumn":16},{"ruleId":"239","severity":1,"message":"241","line":56,"column":12,"nodeType":"214","messageId":"215","endLine":56,"endColumn":17},{"ruleId":"239","severity":1,"message":"242","line":57,"column":12,"nodeType":"214","messageId":"215","endLine":57,"endColumn":25},{"ruleId":"216","severity":1,"message":"243","line":117,"column":8,"nodeType":"218","endLine":117,"endColumn":10,"suggestions":"244"},{"ruleId":"216","severity":1,"message":"245","line":238,"column":8,"nodeType":"218","endLine":238,"endColumn":55,"suggestions":"246"},{"ruleId":"216","severity":1,"message":"247","line":280,"column":8,"nodeType":"218","endLine":280,"endColumn":129,"suggestions":"248"},{"ruleId":"216","severity":1,"message":"249","line":374,"column":9,"nodeType":"218","endLine":374,"endColumn":132,"suggestions":"250"},{"ruleId":"216","severity":1,"message":"251","line":389,"column":8,"nodeType":"218","endLine":389,"endColumn":59,"suggestions":"252"},{"ruleId":"216","severity":1,"message":"253","line":496,"column":9,"nodeType":"218","endLine":496,"endColumn":171,"suggestions":"254"},{"ruleId":"216","severity":1,"message":"255","line":544,"column":8,"nodeType":"218","endLine":544,"endColumn":55,"suggestions":"256"},{"ruleId":"216","severity":1,"message":"257","line":555,"column":8,"nodeType":"218","endLine":555,"endColumn":23,"suggestions":"258"},{"ruleId":"216","severity":1,"message":"259","line":560,"column":8,"nodeType":"218","endLine":560,"endColumn":18,"suggestions":"260"},{"ruleId":"239","severity":1,"message":"261","line":604,"column":11,"nodeType":"214","messageId":"215","endLine":604,"endColumn":29},{"ruleId":"216","severity":1,"message":"262","line":740,"column":8,"nodeType":"218","endLine":740,"endColumn":100,"suggestions":"263"},{"ruleId":"216","severity":1,"message":"253","line":764,"column":8,"nodeType":"218","endLine":764,"endColumn":66,"suggestions":"264"},{"ruleId":"216","severity":1,"message":"265","line":790,"column":8,"nodeType":"218","endLine":790,"endColumn":69,"suggestions":"266"},{"ruleId":"216","severity":1,"message":"265","line":817,"column":8,"nodeType":"218","endLine":817,"endColumn":69,"suggestions":"267"},{"ruleId":"216","severity":1,"message":"268","line":830,"column":8,"nodeType":"218","endLine":830,"endColumn":113,"suggestions":"269"},{"ruleId":"216","severity":1,"message":"270","line":909,"column":8,"nodeType":"218","endLine":909,"endColumn":14,"suggestions":"271"},{"ruleId":"216","severity":1,"message":"272","line":948,"column":8,"nodeType":"218","endLine":948,"endColumn":42,"suggestions":"273"},{"ruleId":"239","severity":1,"message":"274","line":962,"column":11,"nodeType":"214","messageId":"215","endLine":962,"endColumn":26},{"ruleId":"239","severity":1,"message":"275","line":993,"column":11,"nodeType":"214","messageId":"215","endLine":993,"endColumn":21},{"ruleId":"216","severity":1,"message":"268","line":1000,"column":8,"nodeType":"218","endLine":1000,"endColumn":113,"suggestions":"276"},{"ruleId":"212","severity":1,"message":"277","line":1,"column":34,"nodeType":"214","messageId":"215","endLine":1,"endColumn":40},{"ruleId":"212","severity":1,"message":"220","line":2,"column":52,"nodeType":"214","messageId":"215","endLine":2,"endColumn":59},{"ruleId":"212","severity":1,"message":"278","line":4,"column":23,"nodeType":"214","messageId":"215","endLine":4,"endColumn":34},{"ruleId":"221","severity":1,"message":"222","line":9,"column":15,"nodeType":"223","messageId":"224","endLine":9,"endColumn":38},{"ruleId":"221","severity":1,"message":"222","line":11,"column":16,"nodeType":"223","messageId":"224","endLine":11,"endColumn":48},{"ruleId":"221","severity":1,"message":"222","line":12,"column":17,"nodeType":"223","messageId":"224","endLine":12,"endColumn":50},{"ruleId":"221","severity":1,"message":"222","line":15,"column":16,"nodeType":"223","messageId":"224","endLine":15,"endColumn":60},{"ruleId":"216","severity":1,"message":"279","line":48,"column":7,"nodeType":"218","endLine":48,"endColumn":18,"suggestions":"280"},{"ruleId":"216","severity":1,"message":"281","line":29,"column":8,"nodeType":"218","endLine":29,"endColumn":10,"suggestions":"282"},{"ruleId":"212","severity":1,"message":"283","line":215,"column":17,"nodeType":"214","messageId":"215","endLine":215,"endColumn":24},{"ruleId":"212","severity":1,"message":"284","line":215,"column":26,"nodeType":"214","messageId":"215","endLine":215,"endColumn":32},{"ruleId":"212","severity":1,"message":"220","line":2,"column":18,"nodeType":"214","messageId":"215","endLine":2,"endColumn":25},{"ruleId":"212","severity":1,"message":"285","line":6,"column":10,"nodeType":"214","messageId":"215","endLine":6,"endColumn":20},{"ruleId":"212","severity":1,"message":"286","line":3,"column":32,"nodeType":"214","messageId":"215","endLine":3,"endColumn":37},{"ruleId":"212","severity":1,"message":"287","line":6,"column":26,"nodeType":"214","messageId":"215","endLine":6,"endColumn":38},"no-native-reassign",["288"],"no-negated-in-lhs",["289"],"no-unused-vars","'jwtDecode' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'withToken'. Either include it or remove the dependency array.","ArrayExpression",["290"],"'message' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'SettingOutlined' is defined but never used.","'Settings' is defined but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["291"],"React Hook useEffect has missing dependencies: 'props.history' and 'user.is_admin'. Either include them or remove the dependency array.",["292"],"'allUsersData' is defined but never used.","'setAllUsers' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["293"],"React Hook useEffect has missing dependencies: 'history', 'user.user.email', and 'user.user.is_admin'. Either include them or remove the dependency array.",["294"],"React Hook useEffect has a missing dependency: 'user.email'. Either include it or remove the dependency array.",["295"],"@typescript-eslint/no-unused-vars","'Props' is defined but never used.","'color' is assigned a value but never used.","'readSaveImage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editor.editor.orignalImage' and 'editor.editor.removedImage'. Either include them or remove the dependency array.",["296"],"React Hook useCallback has a missing dependency: 'zoom'. Either include it or remove the dependency array.",["297"],"React Hook useMemo has unnecessary dependencies: 'originalImageCanvasRef.current.height', 'originalImageCanvasRef.current.width', and 'removedImage'. Either exclude them or remove the dependency array.",["298"],"React Hook useCallback has an unnecessary dependency: 'newImageCanvasRef'. Either exclude it or remove the dependency array.",["299"],"React Hook useCallback has an unnecessary dependency: 'canvasRef'. Either exclude it or remove the dependency array.",["300"],"React Hook useCallback has a missing dependency: 'updateZoomedContainer'. Either include it or remove the dependency array.",["301"],"React Hook useCallback has a missing dependency: 'zoom'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDrawnPos' needs the current value of 'zoom'.",["302"],"React Hook useEffect has a missing dependency: 'forceRedraw'. Either include it or remove the dependency array.",["303"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["304"],"'readSaveStateImage' is assigned a value but never used.","React Hook useCallback has unnecessary dependencies: 'canvasRef', 'context', and 'draw'. Either exclude them or remove the dependency array.",["305"],["306"],"React Hook useCallback has missing dependencies: 'context' and 'insertForegroundImage'. Either include them or remove the dependency array.",["307"],["308"],"React Hook useCallback has a missing dependency: 'divSizing.width'. Either include it or remove the dependency array.",["309"],"React Hook useEffect has missing dependencies: 'backgroundIsTransparent', 'clearBackgroundColor', 'divSizing.height', 'divSizing.width', 'drawnPos', 'forceRedraw', 'originalImageContext', and 'updateZoomedContainer'. Either include them or remove the dependency array. You can also do a functional update 'setDrawnPos(d => ...)' if you only need 'drawnPos' in the 'setDrawnPos' call.",["310"],"React Hook useEffect has missing dependencies: 'forceRedraw' and 'updateZoomedContainer'. Either include them or remove the dependency array.",["311"],"'imgButtonStyles' is assigned a value but never used.","'saveButton' is assigned a value but never used.",["312"],"'useRef' is defined but never used.","'useDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'form' and 'user'. Either include them or remove the dependency array.",["313"],"React Hook useEffect has missing dependencies: 'dispatch', 'single', and 'user'. Either include them or remove the dependency array.",["314"],"'visible' is assigned a value but never used.","'source' is assigned a value but never used.","'LOG_IN_JWT' is defined but never used.","'Image' is defined but never used.","'EditOutlined' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"349","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"352","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},"Update the dependencies array to be: [withToken]",{"range":"363","text":"364"},"Update the dependencies array to be: [pathname, props.history]",{"range":"365","text":"366"},"Update the dependencies array to be: [props.history, user.is_admin]",{"range":"367","text":"368"},"Update the dependencies array to be: [active, dispatch]",{"range":"369","text":"370"},"Update the dependencies array to be: [history, user.user.email, user.user.is_admin]",{"range":"371","text":"372"},"Update the dependencies array to be: [user.email]",{"range":"373","text":"374"},"Update the dependencies array to be: [editor.editor.orignalImage, editor.editor.removedImage]",{"range":"375","text":"376"},"Update the dependencies array to be: [cursor, brushSize, zoom]",{"range":"377","text":"378"},"Update the dependencies array to be: [originalImage, orientation]",{"range":"379","text":"380"},"Update the dependencies array to be: [context, zoom, drawnPos, canvasRef, originalImage, originalImageCanvasRef, removedImage, patternLoaded]",{"range":"381","text":"382"},"Update the dependencies array to be: [context, zoom, removedImage, divSizing]",{"range":"383","text":"384"},"Update the dependencies array to be: [patternLoaded, forceRedraw, updateZoomedContainer]",{"range":"385","text":"386"},"Update the dependencies array to be: [drawing, drawnPos, zoom, brushSize, mode]",{"range":"387","text":"388"},"Update the dependencies array to be: [forceRedraw, patternLoaded]",{"range":"389","text":"390"},"Update the dependencies array to be: [draw, drawnPos]",{"range":"391","text":"392"},"Update the dependencies array to be: [newImageCanvasRef, forceRedraw, updateZoomedContainer, divSizing]",{"range":"393","text":"394"},"Update the dependencies array to be: [updateZoomedContainer, forceRedraw]",{"range":"395","text":"396"},"Update the dependencies array to be: [drawnPos, context, clearCanvas, insertForegroundImage]",{"range":"397","text":"398"},{"range":"399","text":"398"},"Update the dependencies array to be: [zoom, divSizing.width]",{"range":"400","text":"401"},"Update the dependencies array to be: [backgroundIsTransparent, clearBackgroundColor, divSizing.height, divSizing.width, drawnPos, forceRedraw, originalImageContext, updateZoomedContainer, zoom]",{"range":"402","text":"403"},"Update the dependencies array to be: [imgBlur, backgroundIsTransparent, updateZoomedContainer, forceRedraw]",{"range":"404","text":"405"},{"range":"406","text":"401"},"Update the dependencies array to be: [active, form, id, user]",{"range":"407","text":"408"},"Update the dependencies array to be: [dispatch, single, user]",{"range":"409","text":"410"},[2529,2531],"[withToken]",[1455,1465],"[pathname, props.history]",[1590,1592],"[props.history, user.is_admin]",[1939,1947],"[active, dispatch]",[2099,2101],"[history, user.user.email, user.user.is_admin]",[872,874],"[user.email]",[4541,4543],"[editor.editor.orignalImage, editor.editor.removedImage]",[11383,11430],"[cursor, brushSize, zoom]",[12882,13003],"[originalImage, orientation]",[17998,18121],"[context, zoom, drawnPos, canvasRef, originalImage, originalImageCanvasRef, removedImage, patternLoaded]",[18589,18640],"[context, zoom, removedImage, divSizing]",[23840,24002],"[patternLoaded, forceRedraw, updateZoomedContainer]",[26067,26114],"[drawing, drawnPos, zoom, brushSize, mode]",[26346,26361],"[forceRedraw, patternLoaded]",[26461,26471],"[draw, drawnPos]",[35769,35861],"[newImageCanvasRef, forceRedraw, updateZoomedContainer, divSizing]",[36749,36807],"[updateZoomedContainer, forceRedraw]",[37863,37924],"[drawnPos, context, clearCanvas, insertForegroundImage]",[38939,39000],[39680,39785],"[zoom, divSizing.width]",[42782,42788],"[backgroundIsTransparent, clearBackgroundColor, divSizing.height, divSizing.width, drawnPos, forceRedraw, originalImageContext, updateZoomedContainer, zoom]",[44300,44334],"[imgBlur, backgroundIsTransparent, updateZoomedContainer, forceRedraw]",[46297,46402],[1782,1793],"[active, form, id, user]",[1015,1017],"[dispatch, single, user]"]